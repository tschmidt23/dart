/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __bot_core_images_t_hpp__
#define __bot_core_images_t_hpp__

#include <vector>
#include "bot_core/image_t.hpp"

namespace bot_core
{

/**
 * simple array of images
 * originated in multisense driver
 */
class images_t
{
    public:
        int64_t    utime;

        int32_t    n_images;

        std::vector< int16_t > image_types;

        std::vector< bot_core::image_t > images;

    public:
        // If you're using C++11 and are getting compiler errors saying things like
        // ‘constexpr’ needed for in-class initialization of static data member
        // then re-run lcm-gen with '--cpp-std=c++11' to generate code that is
        // compliant with C++11
        static const int16_t  LEFT = 0;
        // If you're using C++11 and are getting compiler errors saying things like
        // ‘constexpr’ needed for in-class initialization of static data member
        // then re-run lcm-gen with '--cpp-std=c++11' to generate code that is
        // compliant with C++11
        static const int16_t  RIGHT = 1;
        // If you're using C++11 and are getting compiler errors saying things like
        // ‘constexpr’ needed for in-class initialization of static data member
        // then re-run lcm-gen with '--cpp-std=c++11' to generate code that is
        // compliant with C++11
        static const int16_t  DISPARITY = 2;
        // If you're using C++11 and are getting compiler errors saying things like
        // ‘constexpr’ needed for in-class initialization of static data member
        // then re-run lcm-gen with '--cpp-std=c++11' to generate code that is
        // compliant with C++11
        static const int16_t  MASK_ZIPPED = 3;
        // If you're using C++11 and are getting compiler errors saying things like
        // ‘constexpr’ needed for in-class initialization of static data member
        // then re-run lcm-gen with '--cpp-std=c++11' to generate code that is
        // compliant with C++11
        static const int16_t  DEPTH_MM = 4;
        // If you're using C++11 and are getting compiler errors saying things like
        // ‘constexpr’ needed for in-class initialization of static data member
        // then re-run lcm-gen with '--cpp-std=c++11' to generate code that is
        // compliant with C++11
        static const int16_t  DISPARITY_ZIPPED = 5;
        // If you're using C++11 and are getting compiler errors saying things like
        // ‘constexpr’ needed for in-class initialization of static data member
        // then re-run lcm-gen with '--cpp-std=c++11' to generate code that is
        // compliant with C++11
        static const int16_t  DEPTH_MM_ZIPPED = 6;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "images_t"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int images_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int images_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int images_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t images_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* images_t::getTypeName()
{
    return "images_t";
}

int images_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->n_images, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->n_images > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->image_types[0], this->n_images);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->n_images; a0++) {
        tlen = this->images[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int images_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->n_images, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->n_images) {
        this->image_types.resize(this->n_images);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->image_types[0], this->n_images);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    this->images.resize(this->n_images);
    for (int a0 = 0; a0 < this->n_images; a0++) {
        tlen = this->images[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int images_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, this->n_images);
    for (int a0 = 0; a0 < this->n_images; a0++) {
        enc_size += this->images[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t images_t::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == images_t::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)images_t::getHash };

    uint64_t hash = 0xfbe98784e0a4fbadLL +
         bot_core::image_t::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
